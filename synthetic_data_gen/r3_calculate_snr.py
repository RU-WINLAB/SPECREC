'''
Author: Dragoslav
Modified by: Tina Burns
Rutgers University WINLAB
2020
This program is used to calculate the SNR based on two file generated by 
the datagen gnuradio programgs
'''
#!/usr/bin/env python3
import numpy as np
from argparse import ArgumentParser


class glVar:
    clean = None
    noise = None

def read_binary_iq(filename, **kwargs):         
    data = np.fromfile(filename, dtype=np.float32, **kwargs)
    dataiq = ((data[0::2] + data[1::2]*1j).astype(np.complex))
    return dataiq

def argument_parser():
    parser = ArgumentParser()
    parser.add_argument(
        "--filename", dest="filename", type=str, default='file1.bin',
        help="Set Filename [default=%(default)r]")
    parser.add_argument(
        "--num_sigs", dest="numsigs", type=int, default=1,
        help="Set Number of signals present [default=%(default)r]")
    return parser

def main(filename = "file1.bin", numsigs = 1):
    print("Calculating SNR")
    samples = read_binary_iq(filename)
    numsamps = len(samples)
    if numsigs == 1:
        cleansig = read_binary_iq('cleansig_' + filename)
        cleansig = cleansig[0:numsamps]
        glVar.clean = cleansig
        noise = samples - cleansig
        glVar.noise = noise
        # if abs(noise) <= 0.1: noise = 0.1
        # if abs(cleansig) <= 0: cleansig = 0.1
        snr = 20*np.log10(np.mean(abs(cleansig)) / np.mean(abs(noise)))
        sinr1 = snr; sinr2 = "n/a";
        print ('Total analog SNR is {} dB'.format((sinr1)))
    elif numsigs == 2:
        cleansig1 = read_binary_iq('cleansig1_' + filename)
        cleansig1 = cleansig1[0:numsamps]
        cleansig2 = read_binary_iq('cleansig2_' + filename)
        cleansig2 = cleansig2[0:numsamps]
        noise_interf1 = samples - cleansig1
        noise_interf2 = samples - cleansig2
        sinr1 = 20*np.log10(np.mean(abs(cleansig1)) / np.mean(abs(noise_interf1)))
        sinr2 = 20*np.log10(np.mean(abs(cleansig2)) / np.mean(abs(noise_interf2)))
        #print(sinr1)
        print ('Total analog SINR for signal 1 is {} dB'.format(sinr1))
        print ('Total analog SINR for signal 2 is {} dB'.format(sinr2))
    return (sinr1, sinr2)

if __name__ == '__main__':
    main()

